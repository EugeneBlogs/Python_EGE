'''
Известно, что Ваня выиграл своим первым ходом после неудачного первого хода Пети.
Укажите минимальное значение "S", когда такая ситуация возможна.
'''

'''
"x" - количество камней в первой куче
"s" - количество камней во второй куче
"h" - текущий ход

1 - исходные значения
2 - ход Пети (П - первый), значит Петины ходы - чётные
3 - ход Вани (В - второй), значит Ванины ходы - нечётные
'''


def F(x, s, h):
    # 3 - это первый ход Вани
    # Если первый ход Вани, и сумма камней больше 66, то возвращаем ИСТИНУ
    if h == 3 and x + s >= 66:
        return 1
    # Если ход Вани, но сумма камней меньше 66
    # ИЛИ ход не Вани, но сумма камней больше 66, то возвращаем ЛОЖЬ
    elif (h == 3 and x + s < 66) or (h != 3 and x + s >= 66):
        return 0
    else:
        # Расписываем стратегии обоих игроков (выигрышную и проигрышную)
        # В них перечисляем все возможные ходы:
        # прибавить 2 к первой ИЛИ ко второй куче ИЛИ умножить на 2 первую ИЛИ вторую кучу.

        # В этом случае они одинаковые, просто оставляем как заготовку на будущее

        # Так как Петя мог походить неудачно, то при любом его ходе (т.е. ИЛИ)
        # любой ход Вани (т.е. ИЛИ) должен быть победным
        if h % 2 == 0:
            return F(x + 2, s, h + 1) or F(x, s + 2, h + 1) or F(x * 2, s, h + 1) or F(x, s * 2, h + 1)
        if h % 2 != 0:
            return F(x + 2, s, h + 1) or F(x, s + 2, h + 1) or F(x * 2, s, h + 1) or F(x, s * 2, h + 1)


# Перебираем возможные варианты из диапозона
for s in range(1, 58 + 1):
    # Если получили ИСТИНУ, значит Ваня выиграл
    # Исходные данные: 7 в первой куче, "S" во второй и 1 ход
    if F(7, s, 1):
        # Выводим результат на экран
        print(s)
        break
