# Условие задания КИМ 6 (Умскул):
'''
Учебный алгоритм Черепаха работает на плоскости с декартовой системой координат.
В начальный момент Черепаха находится в начале координат, а её голова направлена вдоль положительного направления оси абсцисс,
хвост опущен. Если у Черепахи опущен хвост, то она оставляет следы на поле в виде линий.
В каждый конкретный момент известно положение исполнителя и направление его движения.

У исполнителя существует две команды:
- Вперёд n (где "n" - целое число), вызывающая передвижение Черепахи на "n" единиц в том направлении,
куда указывает её голова.
- Налево m (где "m" - целое число), вызывающая изменение направления движения на "m" градусов против часовой стрелки.

Запись "Повтори k [Команда1 Команда2 ... Команда]" означает, что последовательность из "S" команд повторится "k" раз.

Черепахе был дан для исполнения следующий алгоритм:
"Повтори 24 [Вперед 3 Налево 60]".

Определите, сколько точек с целочисленными координатами будут находиться внутри области, ограниченной линией,
заданной данным алгоритмом. Точки на линии учитывать не следует.
'''

# СПОСОБ 1 (РУЧНОЙ)

from turtle import *

tracer(0)  # Убираем анимацию для уменьшения времени
k = 30  # Коэффициент для масштабирования рисунка

# Переписали код из условия
pendown()
for _ in range(24):
    forward(3 * k)
    left(60)

penup()

# Расчерчиваем координатную плоскость (-10 и 10 берём исходя из условия: в условии всего лишь 3, поэтому можно брать небольшие числа)
for x in range(-10, 10):
    for y in range(-10, 10):
        setpos(x * k, y * k)
        dot(2)

update()  # Обновляем графику, так как убрали анимацию
done()

# Теперь вручную считаем точки, находящиемся внутри фигуры. Ответ: 24.

# СПОСОБ 2 (АВТОМАТИЧЕСКИЙ)

from turtle import *

tracer(0)  # Убираем анимацию для уменьшения времени
k = 30  # Коэффициент для масштабирования рисунка (лучше брать больше, с маленьким может быть неправильный ответ)

# Переписали код из условия
pendown()
begin_fill()  # Начинаем заливать фигуру
# Изменим 24 на 6 (так как по рисунку видно, что получился шестиугольник).
# А с числом 24 не работает заливка, так как фигура получается незакольцованной.
for _ in range(6):
    forward(3 * k)
    left(60)
end_fill()  # Заканчиваем заливать фигуру
penup()

canvas = getcanvas()  # Записываем текущее поле в переменную
count = 0  # Счётчик для точек, которые подошли
# Пересчитываем координатную плоскость
for x in range(-10, 10):
    for y in range(-10, 10):
        # Данный метод возвращает ID элементов с данными координатами
        # Метод ищет по прямоугольнику, но если передалть в начало и в конец одни и те же координаты, то будет искать по точке
        if canvas.find_overlapping(x * k, y * k, x * k, y * k) == (5,):  # Если нашлась только заливка (заливка = (5,) )
            count += 1
print(count)  # Выводим результат без рисунка, так как он уже не нужен
