# СПОСОБ 1 (долго работает с большим количеством строк)

import math  # Подключаем библиотеку с математическими функциями


# Функция для расчёта Евклидова расстояния
def euclidean_distance(p1, p2):  # p1[0] = x1, p1[1] = y1, p2[0] = x2, p2[1] = y2
    return math.sqrt((p1[0] - p2[0]) ** 2 + (p1[1] - p2[1]) ** 2)  # Расстояние = Корень из (x1-x2)^2 + (y1-y2)^2


file = open("../27_A.txt")  # Считываем данные из файла
# Считываем первую строку с заголовком (она нам не нужна, а если мы её считали, то больше она не будет считываться)
file.readline()
# Записываем все строки из файла как список из map с типом float (так как значения дробные),
# меняя все запятые на точки (чтобы не было ошибки) и деля по пробелу
points = [list(map(float, s.replace(",", ".").split())) for s in file]
final_centroids = []  # Массив для хранения финальных центроидов, до которых минимальное расстояние
min_sum_distance = 10 ** 10  # Переменная для хранения минимального суммарного расстояния

# Перебираем по 2 точки из всего массива
for i in range(len(points)):
    for j in range(i + 1, len(points)):
        sum_distance = 0  # Переменная для суммарного расстояния до всех точек (звёзд)
        # Проходим по всем точкам и вычисляем Евклидова расстояние до обеих точек
        for point in points:
            d1 = euclidean_distance(point, points[i])
            d2 = euclidean_distance(point, points[j])
            sum_distance += min(d1, d2)  # Записываем минимальное расстояние
        # Если полученный результат меньше минимального значения, то перезаписываем минимум и финальные центроиды
        if sum_distance < min_sum_distance:
            min_sum_distance = sum_distance
            final_centroids = [points[i], points[j]]
# Находим среднее арифметическое (делим на 2) для x,y финальных центроидов и приводим к целому значению
P_x = int(sum([x for x, y in final_centroids]) / 2 * 10_000)
P_y = int(sum([y for x, y in final_centroids]) / 2 * 10_000)
print(P_x, P_y)  # Выводим результат
